<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>content</key>
	<string>(gen-class${50/((.|\n)+)/(?1:
;;  Removing last comment will remove all.
;;  
;;  In all subsequent sections taking types, the primitive types can be
;;  referred to by their Java names (int, float etc\), and classes in the
;;  java.lang package can be used without a package qualifier. All other
;;  classes must be fully qualified.
;;  
;;  Options should be a set of key value\/pairs, all \:except for name are optional\:
;;  )/}
	:name ${1:package.qualified.name}${50/((.|\n)+)/(?1:
;;  
;;  The package-qualified name of the class to be generated
;;  )/}${2:
	:extends ${3:Aclass}${50/((.|\n)+)/(?1:
;;  
;;  Specifies the superclass, the non-private methods of which will be
;;  overridden by the class. If not provided, defaults to Object.
;;  )/}}${4:
	:implements [${5:Interfaces}]${50/((.|\n)+)/(?1:
;;  
;;  One or more interfaces, the methods of which will be implemented by.
;;  the class
;;  )/}}${6:
	:init ${7:a-name}${50/((.|\n)+)/(?1:
;;  
;;  If supplied, names a function that will be called with the arguments
;;  to the constructor. Must return [ [superclass-constructor-args] state]
;;  If not supplied, the constructor args are passed directly to
;;  the superclass constructor and the state will be nil
;;  )/}}${8:
	:constructors {[${9:param.Types}] [${10:super.param.Types}]${11:, ...}\}${50/((.|\n)+)/(?1:
;;  
;;  By default, constructors are created for the generated class which
;;  match the signature(s\) of the constructors for the superclass. This
;;  parameter may be used to explicitly specify constructors, each entry
;;  providing a mapping from a constructor signature to a superclass
;;  constructor signature. When you supply this, you must supply an \:init
;;  specifier. 
;;  )/}}${12:
	:methods [[${13:a-name} [${14:param.Types}] ${15:return.Type}]${16:, ...}]${50/((.|\n)+)/(?1:
;;  
;;  The generated class automatically defines all of the non-private
;;  methods of its superclasses\/interfaces. This parameter can be used
;;  to specify the signatures of additional methods of the generated
;;  class. Static methods can be specified with #^{\:static true} in the
;;  signature's metadata. Do not repeat superclass\/interface signatures
;;  here.
;;  )/}}${17:
	:main true${50/((.|\n)+)/(?1:
;;  
;;  If supplied and true, a static public main function will be generated. It will
;;  pass each string of the String[] argument as a separate argument to
;;  a function called (str prefix main\).
;;  )/}}${18:
	:factory ${19:a-name}${50/((.|\n)+)/(?1:
;;  
;;  If supplied, a (set of\) public static factory function(s\) will be
;;  created with the given name, and the same signature(s\) as the
;;  constructor(s\).
;;  )/}}${20:
	:state ${21:a-name}${50/((.|\n)+)/(?1:
;;  
;;  If supplied, a public final instance field with the given name will be
;;  created. You must supply an \:init function in order to provide a
;;  value for the state. Note that, though final, the state can be a ref
;;  or agent, supporting the creation of Java objects with transactional
;;  or asynchronous mutation semantics.
;;  )/}}${22:
	:exposes {${23:protected-field-name} {${24::get ${25:a-name}} ${26::set ${27:a-name}}\}${28:, ...}\}${50/((.|\n)+)/(?1:
;;  
;;  Since the implementations of the methods of the generated class
;;  occur in Clojure functions, they have no access to the inherited
;;  protected fields of the superclass. This parameter can be used to
;;  generate public getter\/setter methods exposing the protected field(s\)
;;  for use in the implementation.
;;  )/}}${29:
	:exposes-methods {${30:super-method-name} ${31:exposed-name}${32:, ...}\}${50/((.|\n)+)/(?1:
;;  
;;  It is sometimes necessary to call the superclass implementation of an
;;  overridden method.  Those methods may be exposed and referred in 
;;  the new method implementation by a local name.
;;  )/}}${34:
	:prefix "${35:string}"${50/((.|\n)+)/(?1:
;;  
;;  Default\: "-" Methods called e.g. Foo will be looked up in vars called
;;  prefixFoo in the implementing ns.
;;  )/}}${36:
	:impl-ns ${37:a-name}${50/((.|\n)+)/(?1:
;;  
;;  Default\: the name of the current ns.
;;  Implementations of methods will be looked up in this namespace.
;;  )/}}${38:
	:load-impl-ns false${50/((.|\n)+)/(?1:
;;  
;;  Default\: true. Causes the static initializer for the generated class
;;  to reference the load code for the implementing namespace. Should be
;;  true when implementing-ns is the default, false if you intend to
;;  load the code via some other method.
;;  )/}}${50:${51:${52:${53:${54:${55:${56:${57:
;;  Remove this to clear previous comment
;;  From Clojure documentation
;;  Copyright (c) Rich Hickey. All rights reserved.
    }}}}}}}})
$0</string>
	<key>name</key>
	<string>gen-class ;doc</string>
	<key>scope</key>
	<string>source.clojure</string>
	<key>tabTrigger</key>
	<string>class</string>
	<key>uuid</key>
	<string>E284D107-7D11-463B-BA8D-409D0FE822D9</string>
</dict>
</plist>
