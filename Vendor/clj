#!/usr/bin/env ruby
require 'optparse'
CLOJURE_HOME = ENV['CLOJURE_HOME'] || File.dirname(__FILE__)

def e_sh(obj)
  case obj
  when Array:   obj.map{|a| e_sh(a)}
  when String:  obj.to_s.gsub(/(?=[^a-zA-Z0-9_.\/\-\x7F-\xFF\n])/, '\\').gsub(/\n/, "'\n'").sub(/^$/, "''")
  end
end


if ARGV.first == "--version"
  puts "1.0"
  exit 0
end

# =============================
# = Initialize the baser Jars =
# =============================
@jars = %w( 
  jline.jar 
  jna.jar 
  clojure.jar 
  clojure-contrib.jar 
).map{|j| "#{CLOJURE_HOME}/#{j}"}

if not(File.exist?("#{CLOJURE_HOME}/clojure.jar"))
  puts("clojure.jar not found in : #{CLOJURE_HOME}")
  exit(1)
end

# ========================
# = Command line parsing =
# ========================
CMDLINE = OptionParser.new do |opts|
  opts.separator ""  
  opts.on("-i", "--interactive", "run a REPL") {@interactive = true}
  opts.on("-cp", "--classpath", "add to the classpath") {|path| @jars += path.split(":")}
end

CMDLINE.parse!(ARGV)

@interactive = true if ARGV.empty? #default to a REPL

CLASSPATH = e_sh(@jars).join(":")

if @interactive
  exec("java -server -Djava.ext.dirs=./jars -cp #{CLASSPATH} jline.ConsoleRunner clojure.lang.Repl #{e_sh(ARGV).join(" ")}")
else         
  exec("java -server -Djava.ext.dirs=./jars -cp #{CLASSPATH} clojure.lang.Script #{e_sh(ARGV).join(" ")}")  
end